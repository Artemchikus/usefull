Сервисы:
• Freezer – сервис управления резервным копированием/восстановлением и аварийным восстановлением узлов. Состоит из следующих служб:
    ◦ freezer-api – принимает и отвечает на вызовы API конечного пользователя и перенаправляет их другим службам сервиса;
    ◦ freezer-agent – выполняет операций резервного копирования/восстановления;
    ◦ freezer-scheduler - оправляет API запросы freezer-api для планирования, получения, обновления или удаления заданий резервного копирования;
    ◦ freezer-dr – осуществляет аварийное восстановления в случае сбоя любого вычислительного узла.
• Ironic – сервис управления физическими машинами (узлами) и их предоставления. Состоит из следующих служб:
    ◦ ironic-api – REST API, который обрабатывает запросы приложений, отправляя их ironic-conductor через RPC;
    ◦ ironic-conductor – добавляет/редактирует/удаляет узлы, включает/выключает узлы с помощью IPMI или другим протоколом производителя и подготавливает/развертывает/очищает новые подключаемые к кластеру узлы;
    ◦ ironic-python-agent – предоставляет ironic-conductor удаленный доступ к узлу, а также управление им и анализ его оборудования.
• Cinder – сервис управления постоянными хранилищами. Состоит из следующих служб:
    ◦ cinder-api – принимает API запросы и направляет их на cinder-volume для выполнения действий;
    ◦ cinder-volume – отвечает за чтение и запись данных в блочное хранилище;
    ◦ cinder-scheduler – отвечает за выбор оптимального узла, на котором будет создан том;
    ◦ cinder-backup - обеспечивает резервное копирование томов в хранилище резервных копий.
• Senlin – сервис управление кластеризацией внутри кластера. Состоит из следующих служб:
    ◦ senlin-api - REST API, который обрабатывает API запросы, отправляя их в senlin-engine через RPC;
    ◦ senlin-engine – отвечает за создание и управлении кластерами, узлами, профилями и политиками.
• Nova – сервис управления экземплярами виртуальных машин. Состоит из следующих служб:
    ◦ nova-api – принимает и отвечает на вызовы API конечного пользователя и перенаправляет их другим службам сервиса;
    ◦ nova-api-metadata – принимает запросы метаданных от экземпляров ВМ;
    ◦ nova-compute – служба, которая создает и завершает работу экземпляров виртуальных машин через API-интерфейсы гипервизора;
    ◦ nova-scheduler – определяет, на каком узле поднимется экземпляр ВМ;
    ◦ nova-conductor – обеспечивает взаимодействие между службой nova-compute и базой данных;
    ◦ nova-novncproxy - предоставляет прокси для доступа к запущенным экземплярам через соединение VNC, например, через браузерный клиент novnc.
• Magnum – сервис управления инфраструктурой контейнеров. Состоит из следующих служб:
    ◦ magnum-api – REST API, который обрабатывает API-запросы, отправляя их magnum-conductor через AMQP;
    ◦ magnum-conductor -  подключается к сервису Heat или другому оркестратору контейнеров для управления контейнерным кластером.
• Zun – сервис управления контейнерами. Состоит из следующих служб:
    ◦ zun-api – REST API, который обрабатывает API запросы, отправляя их в zun-compute через RPC;
    ◦ zun-compute – создает и завершает работу контейнеров или модулей через container engine API. Также управляет контейнерами, модулями и вычислительными ресурсами на локальном хосте;
    ◦ zun-wsproxy – предоставляет прокси для доступа к запущенным контейнерам через подключение через веб-сокет;
    ◦ zun-cni - предоставляет службу демона CNI (Container Network Interface).
• Horizon – сервис веб-панели мониторинга. Реализован при помощи HTTP-сервера Apache и службы кэширования Memcached.
• Trove – сервис масштабируемой базы данных. Состоит из следующих служб:
    ◦ trove-api – REST API, принимающий API запросы и отправляющий из trove-taskmanager для решения сложных задач. Также может напрямую обращаться к trove-guestagent для выполнения простых задач, таких как извлечение баз данных или пользователей из экземпляра trove;
    ◦ trove-conductor – отвечает за обновление серверной базы данных Trove информацией, которую trove-guestagent отправляет относительно экземпляров;
    ◦ trove-taskmanager – отвечает за подготовку экземпляров, управление жизненным циклом и выполнение различных операций. Также отправляет trove-guestagent обычные БД команды;
    ◦ trove-guestagent - отвечает за перевод и выполнение команд, отправленных ему trove-taskmanager для конкретной БД.
• Designate – сервис управления DNS. Состоит из следующих служб:
    ◦ designate-api – REST API, который обрабатывает API запросы, отправляя их в designate-central через RPC;
    ◦ designate-central – управляет созданием, удалением и обновлением доменных зон и наборов записей;
    ◦ designate-producer – организует периодические задачи, которые выполняются designate-worker;
    ◦ designate-worker – запускает создание/обновление и удаление доменной зоны, и выполняет периодические задачи;
    ◦ designate-mdns - отвечает за отправку информации о зоне DNS клиенту, обращающемуся к DNS-серверу.
• Ec2-Api – сервис EC2 API сервера OpenStack, для интеграции с Amazon сервисами. Состоит из следующих служб:
    ◦ ec2-api – принимает и отвечает на API и EC2 вызовы конечных пользователей;
    ◦ ec2-api-metadata – предоставляет API метаданных для виртуальных машин. Метаданные используются для настройки ВМ.
    ◦ Keystone – сервис идентификации клиентов API OpenStack. Реализован при помощи HTTP-сервера Apache и личной БД.
• Glance – сервис управления образами ВМ. Состоит из одной службы: glance-api – принимает API запросы обнаружения, извлечения и хранения образов и напрямую взаимодействует с хранилищем образов.
• Watcher – сервис оптимизации инфраструктуры кластера. Состоит из следующих служб:
    ◦ watcher-api – REST API, который принимает вызовы конечных пользователей и отвечает на них, обрабатывая и перенаправляя их в другие службы сервиса через AMQP;
    ◦ watcher-decision-engine – запускает аудиты и возвращает планы действий для достижения целей оптимизации, указанных конечными пользователями при старте аудитов;
    ◦ watcher-applier - выполняет план действий, созданный watcher-decision-engine, путем взаимодействия с другими сервисами OpenStack.
• Masakari – сервис управления высокой доступностью виртуальных машин. Состоит из следующих служб:
    ◦ masakari-api – REST API, который обрабатывает API запросы, отправляя их в masakari-engine через RPC;
    ◦ masakari-engine – запускает процессы асинхронного восстановления ВМ.
• Barbican – сервис управления секретами. Состоит из следующих служб:
    ◦ barbican-api – REST API, который принимает API, отправляя их barbican-worker через RPC;
    ◦ barbican-worker – обеспечивает предоставление и управление секретами, такими как пароли, ключи шифрования и т. д;
    ◦ barbican-keystone-listener – обеспечивает синхронизацию баз данных Keystone и Barbican, слушая уведомления Keystone.
• Octavia – сервис управления балансировкой нагрузки. Состоит из следующих служб:
    ◦ octavia-api – REST API, который принимает API запросы, отправляя их octavia-worker по шине обмена сообщениями Oslo;
    ◦ octavia-health-manager - отслеживает отдельные амфоры (ВМ с балансировщиком нагрузки внутри), чтобы убедиться, что они в рабочем состоянии. Также обрабатывает события отработки отказа в случае неожиданного сбоя амфоры;
    ◦ octavia-housekeeping – очищает устаревшие (удаленные) записи базы данных и управляет ротацией сертификатов амфор;
    ◦ octavia-worker – принимает команды от octavia-api и выполняет действия, необходимые для выполнения запроса API;
    ◦ octavia-python-agent – получает обновления состояния и статистики от драйверов-поставщиков.
• Zaqar – сервис управления обменом сообщениями. Представляет собой полностью реализованный брокер сообщений с REST API.
• Neutron – сервис управления сетями и сетевыми устройствами. Состоит из следующих служб:
    ◦ neutron-server - принимает и направляет API запросы соответствующему подключаемому сетевому агенту для выполнения действий;
    ◦ neutron-l2-agent - использует Open vSwitch, Linux Bridge или другую технологию конкретного поставщика для обеспечения сегментации и изоляции сетей проекта;
    ◦ neutron-dhcp-agent – отвечает за автоматическое предоставление ip-адресов экземплярам ВМ;
    ◦ neutron-metadata-agent – перехватывает запросы ВМ к службе nova-api-metadata добавляет заголовки к запросу и перенаправляет к nova-api-metadata.
    ◦ neutron-l3-agent – обеспечивает маршрутизацию, а также некоторые дополнительные услуги, такие как FWaaS (файрволл как сервис) или VPNaaS (VPN как сервис).
• Tacker – сервис управления оркестровкой NFV (виртуализацией сетевых функций). Состоит из следующих служб:
    ◦ tacker-server – REST API, принимающий API запросы и перенаправляющий их на tacker-conductor через RPC;
    ◦ tacker-conductor - реализует всю логику для работы VNF (виртуальных сетевых функций) и вызова необходимых драйверов, обеспечивающих интерфейс к инфраструктурам NFV.
• Swift – сервис распределенной системы хранения объектов. Состоит из следующих служб:
    ◦ swift-proxy-server – принимает API запросы на загрузку файлов, изменение метаданных и создание контейнеров и перенаправляет их соответствующим службам сервиса;
    ◦ swift-account-server – управляет учетными записями, определенными с помощью хранилища объектов;
    ◦ swift-container-server – управляет сопоставлением контейнеров или папок в хранилище объектов;
    ◦ swift-object-server - управляет реальными объектами, такими как файлы, на узлах хранения.
    ◦ различные периодические процессы: 
        • репликатор – отвечает за целостность данных; 
        • аудитор – перемещает в карантин подозрительные файлы; 
        • процесс удаления учетных записей – удаляет учетную запись и связанные с ней контейнеры и объекты; 
        • процессы обновления контейнеров и объектов;
        • процесс, удаляющий объекты с истекшим сроком жизни.
• Heat – сервис управления оркестрацией. Состоит из следующий служб:
    ◦ heat-api – REST API, который обрабатывает API запросы, отправляя их на heat-engine через RPC; 
    ◦ heat-api-cfn – API, совместимый с AWS CloudFormation, имеет идентичный службе heat-api функционал;
    ◦ heat-engine - организует запуск и управление шаблонами.
• Placement – сервис управления размещением виртуальных машин. Полностью реализован на основе HTTP-сервера Apache.
• Vitrage – сервис анализа первопричин ошибок и иных событий. Состоит из следующих служб:
    ◦ vitrage-graph – включает в себя граф сущностей в оперативной памяти и средство оценки шаблонов, а также отвечает за получение данных из различных источников данных;
    ◦ vitrage-notifier – уведомляет внешние системы об аварийных сигналах/изменениях состояния кластера;
    ◦ vitrage-api - REST API, принимающий API запросы и перенаправляющий их на другие службы сревиса;
    ◦ vitrage-ml – анализирует сигналы тревоги с использованием методов машинного обучения;
    ◦ vitrage-persistor - сохраняет события, поступающие из источников данных в базу данных сервиса.
• Blazar – сервис управления резервированием ресурсов в облаке. Состоит из следующих служб:
    ◦ blazar-api – принимает REST API запросы, чтобы перенаправить их blazar-manager через RPC;
    ◦ blazar-manager - общается с БД сервиса и хранит там данные об аренде, резервировании и событиях, также обрабатывает события, созданные для аренды, и выполняет все необходимые действия. Использует resource-plugin для работы с ресурсами других сервисов;
    ◦ resource-plugin - отвечает за точные действия, которые нужно применить к ресурсам других сервисов. У каждого сервиса свой плагин, который необходимо подключать к данному сервису.
• Manila – сервис управления общими файловыми системами. Состоит из следующих служб:
    ◦ manila-api – принимает REST API запросы, чтобы перенаправить их manila-scheduler;
    ◦ manila-data – обрабатывает операций с данными, таких как копирование, совместное перемещение или резервное копирование;
    ◦ manila-scheduler – планирует и направляет запросы в соответствующую manila-share;
    ◦ manila-share – управляет устройствами, предоставляющими общие файловые системы, через соответствующие драйверы.
• Aodh – сервис управления триггерами. Состоит из следующих служб:
    ◦ aodh-api – REST API, предоставляющий информацию о сработавших триггерах;
    ◦ aodh-evaluator – определяет сработал ли триггер при достижении метриками заданных значений в течение определенного измеряемого периода;
    ◦ aodh-notifier - запускает те или иные действия при срабатывании триггера;
    ◦ aodh-listener – определяет, когда триггер сработает, путем сравнения правил срабатывания триггера и событий, полученных агентами сбора телеметрии.
    ◦ Ceilometer – сервис управления сбором данных телеметрии. Состоит из следующих служб:
    ◦ ceilometer-agent-compute – получает статистику использования ресурсов у узла, на котором находится;
    ◦ ceilometer-agent-central - получает статистику использования ресурсов для ресурсов, не привязанных к экземплярам ВМ или вычислительным узлам;
    ◦ ceilometer-agent-notification – получает всю собранную статистику из других служб сервиса и сохраняет ее в сборщике, по умолчанию это БД Gnocchi.
• Cyborg – сервис управления ускорителями оборудования. Состоит из следующих служб:
    ◦ cyborg-api — REST API, принимающий API запросы и взаимодействузий с cyborg-agent и cyborg-db через cyborg-conductor;
    ◦ cyborg-conductor — координирует взаимодействие и доступ к БД между cyborg-api и cyborg-agent;
    ◦ cyborg-agent — отвечает за взаимодействие с бэкендами ускорителей через драйвер ускорителя (FPGA, GPU, NIC и т. д). 
• Kuryr – сервис управления сетями для контейнеров. Представляет собой плагин, через который сервис Neutron может предоставлять сетевые услуги контейнерам.
• Venus – сервис управления журналами. Представляет собой единый API для сбора логов объектов OpenStack.
• Cloudkitty – сервис оценивания на основе метрик. Состоит из следующих служб:
    ◦ cloudkitty-api - REST API, принимающий API запросы и предоставляющий результаты оценок;
    ◦ cloudkitty-processor - извлекает список областей для оценки (модуль сборщик), собирает для заданной области метрики (модуль коллектор), после чего применяет определенные пользователем правила рейтинга к собранным данным (модуль рейтинга) и сохраняет их в хранилище.
• Mistral – сервис управления workflow (списков задач для выполнения). Состоит из следующих служб:
    ◦ mistral-api – REST API для управления и мониторинга workflow;
    ◦ mistral-engine – выбирает workflow из очереди workflow, обрабатывает управление и поток данных выполнения workflow. Также вычисляет, какие задачи готовы, помещает их в очередь задач и передает данные от задачи к задаче:
    ◦ mistral-task-executor – берет задачи из очереди, запускает описанные в задаче действия и отправляет результаты обратно в mistral-engine;
    ◦ mistral-scheduler – сохраняет и выполняет отложенные вызовы обращенные к mistral-engine или mistral-task-executor, также запускает workflow по событиям;
    ◦ mistral-notifier – направляет события, генерируемые во время выполнения workflow, настроенным издателям (специальным плагинам), которые могут записывать событие в webhook через HTTP, в файл журнала, сообщение Zaqar и т. д.
    ◦ mistral-persistence – хранит определения workflow, текущие состояния выполнения и прошлые результаты выполнения.
• Sahara – сервис предоставления и управления средой обработки больших данных. Состоит и следующих служб:
    ◦ sahara-api – REST API, принимающий API запросы, аунтифицирущий их и перенаправляющий их в sahara-engine и sahara-edp;
    ◦ sahara-engine – отвечает за связь со службами OpenStack и специальными ВМ, на которых происходят вычисления, через плагины;
    ◦ sahara-edp – отвечает за планирование и управление заданиями по обработке данных в кластерах.
• Murano – сервис управления приложениями в облаке. Состоит из следующих служб:
    ◦ murano-api – REST API, принимающий API запросы и перенаправляющий их в murano-engine;
    ◦ murano-engine – осуществляет связь сервисов OpenStack с приложениями;
    ◦ murano-agent – осуществляет операции на серверах пользователей, такие как установка и настройка ПО.
• Solum – сервис управления автоматизацией жизненного цикла разработки программного обеспечения в облаке. Состоит из следующих служб: 
    ◦ solum-api – REST API, принимающий API запросы и перенаправляющий их в solum-conductor;
    ◦ solum-conductor – осуществляет работу с сервисом Trove, читая и записывая в него данные;
    ◦ solum-worker – извлекает репозиторий git, создает его, запускает модульные тесты (если указано), создает контейнер и загружает его в Swift, после чего сохраняет состояние приложения в Trove через службу solum-conductor;
    ◦ solum-deployer – вызывает Heat для развертывания стека с информацией о пользователе и созданном с помощью solum-worker контейнере, после чего состояние приложения сохраняется в Trove через службу solum-conductor.
• Monasca – сервис управления мониторингом облака (призван сменить связку сервисов Aodh и Ceilometer). Состоит из следующих служб: 
    ◦ monasca-api – REST API, который обрабатывает API запросы связанные с получением метрик, сигналов тревоги и уведомлений и перенаправляет их в соответствующие сервисы;
    ◦ monasca-agent – получает данных метрик и отправляет их monasca-api;
    ◦ monasca-persister – записывает метрики и изменения состояний тревоги в базу данных временных рядов;
    ◦ monasca-thresh – вычисляет пороговые значения метрик и определяет состояния тревоги;
    ◦ monasca-notification – отправляет уведомления о тревогах;
    ◦ monasca-transform – преобразует имена и значения метрик, также может создавать новые метрики на основе имеющихся;
    ◦ monasca-analytics - выполняет обнаружение и предсказание аномалий на основе получаемых метрик.
• Adjutant – сервис управления автоматизацией бизнес-процессов, связанных управлением учетными записями в OpenStack. Представляет собой Фреймворк для создания API серверов, представляющих функционал не представленный в Horizon, например регистрация пользователя без участия администратора.
• Tempest – сервис тестирования API кластера OpenStack. Представляет собой набор тестов, которые можно запустить в кластере для проверки работоспособности API OpenStack.
• Rally – сервис тестирования масштабируемости кластера OpenStack. Предоставляет собой набор тестов, которые запускаются для проверки аппаратных возможностей кластера.
• Patrole – сервис проверки безопасности кластера с помощью тестов. Представляет собой набор тестов, запускаемых в кластере для проверки реализации RBAC (управление доступом на основе ролей), от которой существенно зависит безопасность кластера.

Команды:
openstack user list — список пользователей
openstack role list — список ролей
openstack role assignment list — список назначения ролей
openstack domain list — список доменов
openstack volume list — список томов
openstack stack list — список стеков
openstack stack event list имя_стека — список событий при создании стека
openstack stack resource list имя_стека — список ресурсов стека
openstack stack create -t yaml_файл --parameter "параметры" имя_стека - создание стека
openstack volume backup list — список бэкапов томов
openstack server add volume имя_ВМ имя_тома — подключение тома к ВМ
openstack server remove volume имя_ВМ имя_тома — отключение тома от ВМ
openstack service list — список сервисов
openstack server list — список ВМ
openstack metric resource-type list — список типов ресурсов метрик
openstack metric resource list — список ресурсов метрик
openstack metric resource show имя — список метрик связанных с ресурсом
openstack metric measures show --resource-id id_ресурса имя_метрики — список значений определенной метрики ресурса
openstack alarm list — список триггеров
openstack orchestration service list — список сервисов оркестрации
openstack backup list — список резервных копий
openstack volume type list — список типов томов (зашифрованный или нет)
openstack security group list — список групп безопасности
openstack secret list - список секретов
openstack secret store --name имя_секрета --payload <содержимое_секрета> - создание секрета
openstack secret get ссылка_на_секрет - информация о секрете
openstack secret get ссылка_на_секрет --payload - информация о содержимом секрета
openstack secret order create --name <имя_секрета> --algorithm <алгоритм_шифрования> --bit-length <размер> --mode <режим_шифрования> --payload-content-type <формат_секрета> <тип> - создание запроса на секрет
openstack secret order list - список запросов на секрет
openstack secret order get ссылка_на_запрос_на_секрет - информация о запросе на секрет
manila type-create имя_типа_NFS использование_специального_драйвера - создание типа NFS
manila type-list - список типов NFS
manila create NFS 1 --name имя_NFS --share-type тип_NFS - создание NFS
manila list - список NFS
manila access-allow имя_NFS ip сеть --access-level уровень_доступа - создание контроля доступа к NFS
manila access-list имя_NFS - список натроек доступа к данному NFS
manila show share01 - информация о данном NFS
openstack zone create --email почта имя_DNS_зоны - создание DNS зоны
openstack zone list - список DNS зон
openstack recordset create --record запись --type тип_набора_записей имя_DNS_зоны имя_набора_записей - создание набора записей для DNS зоны
openstack recordset list имя_DNS_зоны - список наборов записей для DNS зоны
openstack loadbalancer create --name имя_балансироващика --vip-subnet-id имя_подсети - создание балансировщика нагрузки 
openstack loadbalancer list - список балансировщиков нагрузки
openstack loadbalancer listener create --name имя_слушаетля --protocol протокол --protocol-port порт имя_балансироващика - создание слушателя для данного балансировщика нагрузки
openstack loadbalancer pool create --name имя_пула --lb-algorithm алгоритм_балансировки --listener имя_слушаетля --protocol протокол - создание пула для балансировщика нагрузки
openstack loadbalancer member create --subnet-id имя_подсети --address ip_участника_в_подсети --protocol-port порт имя_пула - создание участника пула балансировщика нагрузки
openstack loadbalancer member list имя_пула - список участников пула балансировщика нагрузки
openstack coe cluster template create имя_шаблона --image образ_вм --external-network имя_внешней_сети --fixed-network имя_локальной_сети --fixed-subnet имя_локальной_подсети --network-driver тип_сетевого_драйвера --docker-storage-driver тип_драйвера_хранения --docker-volume-size размер_тома_контейнера --master-flavor шаблон_ресурсов_для_управляющего_узла --flavor шаблон_ресурсов_для_рабочего_узла --coe тип_кластера - создание шаблона кластера
openstack coe cluster create имя_кластера --cluster-template имя_шаблона_кластера --master-count количество_управляющих_узлов --node-count количество_рабочих_узлов --keypair имя_SSH_ключа - создание кластера 
openstack coe cluster list - список кластеров
rally task start json_файл - запуск тестирования выполнения задачи из json файла в кластере
rally task report id_отчет --out output.html - представление отчета о тесте в виде html
openstack rating module list - список модулей оценки работы кластера
openstack rating module enable тип_модуля - запуск модуля оценки работы кластера
openstack rating тип_модуля service create объект_openstack - выбор объекта openstack для оценки 
openstack rating тип_модуля field create id_модуля имя_поля - указание поля которое должен иметь объект openstack для оценки
openstack rating hashmap mapping create цена --field-id id_поля --value id_нужного_значения_поля -t тип - настройка цены одного периода (указывается в конфиге) во время безотказной работы объекта openstack, занчение поля которого совпадает с указанным
openstack rating summary get - получение сводки рейтинга 
openstack rating dataframes get - получение кадров начисления рейтинга
openstack aggregate list — список агрегаторов узлов
openstack availability zone list — список зон доступности
openstack security group rule list имя_группы — список правил брандмауэра для группы безопасности
openstack security group rule create --protocol протокол --dst-port номер_порта имя_группы — добавление правила брандмауэра в группу безопасности
openstack hypervisor list — список гипервизоров
openstack hypervisor stats show — статистика по гипервизорам
openstack usage list — использование ресурсов объектами
openstack project list — список проектов
openstack quota list — список квот на ресурсы
openstack catalog list — список каталогов
openstack network agent list — список сетевых агентов (dhcp, open vswitch и тд)
openstack compute service list — список служб Nova
openstack host list — список узлов
openstack flavor list - список шаблонов выделения ресурсов
openstack flavor create --id id --vcpus количество_виртуальных_ядер --ram размер_оперативной_памяти --disk размер_диска имя_шаблона - создание шаблона выделения ресурсов
openstack floating ip list — список плавающих ip
openstack floating ip create имя_сети — создание плавающего ip из сети
openstack server add floating ip имя_ВМ ip_адрес — присоединение плавающего Ip к ВМ
openstack hypervisor show имя_узла — информация о гипервизоре узла
openstack endpoint list — список конечных точек
openstack image list — список образов
openstack image save имя_образа > путь_куда_сохранять — скачать образ на локальную машину
openstack image create имя_ВМ имя_образа — создать образ из ВМ в Openstack
openstack volume snapshot create --volume имя_тома имя_снимка — создать снимок тома
openstack volume backup create имя_тома — создать бэкап тома
openstack volume backup restore id_бэкапа имя_тома — откатить том к бэкапу
openstack console url show имя_вм — показать URL по которому можно подключится к ВМ через noVNC
openstack тип show имя_объекта — информация о конкретном объекте
openstack тип delete имя_объекта — удаление объекта
openstack service create --name имя_сервиса —description "описание" тип_сервиса — создание сервиса
openstack endpoint create тип_точки тип_интерфейса url --region регион — создание конечной точки
openstack domain create --description "описание" имя_домена — создание домена
openstack project create --domain имя_домена --description "описание" имя_проекта — создание проекта
openstack user create --domain имя_домена --email почта_пользователя --password пароль_пользователя имя_пользователя — создание пользователя
openstack role create имя_роли — создание роли
openstack role add --project имя_проект --user имя_пользователя имя_роли — создание назначения роли (привязка роли к пользователю)
openstack тип set --имя_поля значение_поля имя_объекта — изменение полей объекта
openstack тип unset --имя_поля значение_поля имя_объекта — удаление поля объекта
openstack console log show имя_ВМ — показать логи ВМ
openstack --debug — полезный флаг для просмотра вызовов к Openstack API
openstack token issue — запрос токена для аутентификации
openstack keypair create имя_пары > файл_сохранения_пары — создание пары ssh ключей
source keystonerc_adm — запуск скриптов (в моем случае задача глобальный переменных для авторизации под ролью admin)
env — просмотр переменных окружения
export <имя переменной>="<значение>" - создание переменной окружения
/etc/имя_сервиса/имя_сервиса(или)службы.conf — файлы конфигов
/var/log/имя_сервиса/имя_сервиса-имя_службы.log — файлы логов (некоторые тут /var/log/httpd/*)