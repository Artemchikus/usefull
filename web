FW:
iptables -L - список всех правил талрицы (-t конкретная таблица, по умолчанию FILTER) (-n параметры в числовом виде) (-v подробнее) (--line-numbers с номерами строк)
iptables-save - сохранить наборы правил из оперативной памяти в файл
iptables-restore - восстановить наборы правил из файла
/etc/sysconfig/iptables - файл с наборами правил
iptables -P <цепочка> <действие> - создание политики для конкретной цепо чки
iptables -A <цепочки> -o <исходящий интерфейс> -j <действие> - создание правила для цепочки (-o пакеты выходящие из интерфейса) (-j - JUMP) (-i пакеты приходящие в интерфейс) (-p протокол) (--dport порт назначения) (--dport порт отправки)
iptables -D <цепочка> <номер правила> - удаление правила из цепочки
iptables -I <цепочка> <номер строки> -m state --state <состояние пакета> -j <действияе> - добавление парвила в определенное место в цепочке (-m использование модуля (iptables-extensions), в данном случае контекстной фильтрации)
 
таблицы iptables:
NAT (network address translation) - изменение адреса пакета
MANGLE - изменение содрежимого пакета
FILTER - фильтрация пакетов

цепочки iptables:
INPUT - входящие пакеты
OUTPUT - исходящие пакеты
FROWARD - пакеты пересылаемые на другой интерфейс

действия iptables:
JUMP - вызов собственной цепочки и возврат к месту вызова
DROP - отбрасывание пакета без уведомления отправителя
REJECT - отбрасывание пакета с уведомлением отправителя
ACCEPT - принять пакет
LOG - запись содержимого пакета в журнал

table:
    chain:
        rule - правило которому должен соответсвовать пакет для прохождения дальше по цепочке
    policy - политика обращения со всеми остальными пакетами цепочки

состояния пакета:
INVALID - пакет не связан ни с одним существующим соединением
NEW - пакет начал новое соединение
ESTABLISHED - пакет связан с существующим соединением (уже как исходили так и приходили пакеты)
RELATED - пакет связан с существующим соединением, но создает новое соединение (например для FTP или ICMP)
DNAT (destination nat) - пакет, адрес источника которого не совпадает с адресом, на который нужно отправить ответ
SNAT (source nat) - пакет, адрес получателя которого не совпадает с адресом, с котрого отправлен ответ

ping своего ip происходит через loopback интерфейс

httpd:
80 - http
443 - https
.htaccess - файл конфигурации httpd для конкетного каталога
контексты конфигруации httpd:
    host - httpd.conf для хоста
    <VirtualHost> - для конкретного сайта на хосте
    <Directory> - для каталога сайта
    <Files> - для конкретных файлов сайта
    <Location> - для конкретного ресурса (URL)
    <IFModule> - для конкретного загруженного модуля
RESTART - перезапустить сервер
RELOAD - перечитать конфигруационный файл
httpd -t - проверка синтаксиса конфигов httpd
httpd -L - список параметров конфигурации
NameVirtualHost - параметр конфига для различения сайтов по именам
mod_ssl - модуль ssl
    SSLEngine - подключить модуль
    SSLCeritificateFile - путь до фалйла сертификата
    SSLCeritificateKeyFile - путь до приватного ключа
Satisfy - настройка выполнения требований для авторизации (all - все, any - любое)
Require - указание требования для авторизации
AuthType - выбор типа аунтефикации
AuthName - имя области аунтефикации (выведется пользователю при попытке обратится к ресурсу)
mod_authz_user - моудль авторизации конкретного пользователя
    Require user <имя пользователя> - конкретные пользователи
    Require valid-user - все пользователи прошедшие аунтефикацию
mod_authz_group - модуль авторизации по группам пользователей
    Require group <имя группы> - конкретные группы
    AuthGroupFile - имя файла хранения групп доступа (если бэкендом аунтефикации выбран файл)
mod_authz_host - модуль авторизации по хосту/ам
    Allow from - разрешен доступ из 
    Deny from - запрещен доступ из
    Order - порядок просмотра правил (например Allow,Deny)
mod_auth_basic - модуль базовой аунтефикации
    AuthBasicProvider - провайдер бэкенда для аунтефикации
mod_auth_file - модуль провайдера бэкенда аунтефикации с помощью файла
    AuthUserFile - имя файла хранения логинов и паролей пользователей (если бэкендом аунтефикации выбран файл)
        htppasswd -c <имя файла> <имя пользователя> - создать файл для бэкенда аунтефикации (без -c добавлять пользователей в файл)
mod_mime (multipropose internet mail extensions) - модуль настройки типа возвращаемого ресурса
    ScriptAlias - указать какой исполняемый файл запускать при обращению к URL

ssl:
1)сервер генерирует закрытый и открытый ключи
2)сервер генерирует запрос на получение сертификата с помощью закрытого ключа
3)сервер отправляет сгенерированный запрос центру сертифкации
4)центр сертификации подписывает своим приватным ключем хэш присланного запроса и отправляет его серверу
5)клиент отправляет запрос с параметрами на получение открытого ключа
6)сервер выбирает поддерживаемые параметры из параметров переданных клиентом
7)сервер отправляет сертификат (публичный ключ, подписанный одним из корневых доверенных центров сертификации, данные об организации, выдавшей сертификат и в некоторых случаях зашифрованный секретный ключ, а также fingerprint(хеш) публичного ключа)
8)клиент проверяет сертификат через авторитетный сервер сертификации, расшифровывая цифровую подпись (зашифрованный с помощью закрытого ключа центра хэш сертификата) сертификата с помощью публичного ключа центра сертификации, заранее прописанного в базе данных брузера
9)клиент создает сеансовый ключ
10)клиент шифрует сеансовый ключ с помощью открытого ключа и отравляет серверу
11)сервер и клиент шифруют информацию с помощью сеансового ключа
12)сеансовый ключ перегенерируется после передачи определенного количества дланных или прошествии определенного количества времени

поля сертификата отправляемого сервером:
tbsCertificate (to be signed certificate) - неподписанный сертификат сгенерированный сервером с помощью своего приватного ключа
signatureAlgoritm - алгоритм, ипользовавшийся для подписи сертификата
signatureValue - подписанный сертификат

openssl genrsa -out <имя файла> 2048 - создать приватный ключ RSA определенного размера и сохранить его в файл
openssl rsa in <имя файла приватного ключа> -out <имя файла публичного ключа> -pubout - создание публичного ключа на сонове приватного
openssl req -new -x509 -days 365 -key <имя файла ключа> -out <имя файла> - создать самоподписанный сертификат на основе приватного ключа и сохранить его в файл
openssl req -new -newkey rsa:2048 -x509 -days 365 -keyout <имя файла ключа> -out <имя файла> - создать и приватный ключ и сертификат одновременно
openssl req -new -key <имя файла ключа> -out <имя файла> - создать запрос центру сертификации на получение сертификата
openssl x509 -in <файл сертификата> -text -fingerprint -noout -modulus - прочитать сертификат (modulus - публичный ключ сервера)
openssl s_client -connect <URL> - получить сертификат сайта
openssl rand - сгенерировать случайные байты (-rand - файлы для хеша базы рандомных чисел (/dev.random /dev/urandom /boot/vmlinuz /var/log/messages))
openssl des3 -in <имя незашифрованного файла> -out <имя зашифрованного файла> - зашифровать файл с помощью des3 (-d - расшифровать)
openssl md5 -c <имя файла> - вычислить хеш файла
openssl dgst -sign <приватный ключ> -out <имя подписанного файла> -sha256 <имя файла> - подписание файла с помощью приватного ключа
openssl dgst -signature <имя подписанного файла> -verify <публичный ключ> <имя неподписанного файла> - проверка подписанного файла на подлинность
openssl pkeyutl -in <имя незашифрованного файла> -out <имя зашифрованного файла> -inkey <публичный ключ> -pubin -encrypt - зашифровка файла с помощью публичного ключа
openssl pkeyutl -in <имя зашифрованного файла> -out <имя незашифрованного файла> -inkey <приватный ключ> -decrypt - расшифровка файла с помощью приватного ключа
/usr/lib/ssl/openssl.conf - конфиг для создания запроса на сертификатт по умолчанию
trust anchor --store <имя самоподписанного сертификата> - добавить самоподписанный сертификат в доверенные (--remove - убрать из доверенных)
update-ca-trust - обновить список доверенных сертификатов

html:
<pre> - тег внутри которого форматирование сохраняется

dns (bing):
53 порт
MX (mail exchanger) - запись почтового сервера
A (adress) - запись ip из имени сервера
PTR (pointer) - запись имя из ip сервера
CNAME (canonical name) - запись настоящего имени изи известного
NS (name server) - запись доменных серверов в зоне
SOA (start of autority) - запись ответсвенного за доменную зону

рекурсивный запрос - клиент просит доменный сервер отыскать самомоу
итеративный запрос - сервер спрашивает все доменные сервера начиная с корневого пока не найдет нужную запись

/etc/resolv.conf - файл конфигурации доменных серверов
/etc/services - файл с базовыми портами служб
/etc/protocols - файл с номерами протоколов

dhcp (bootp):
67 порт - сервер
68 порт - клиент
1)клиент подключился к сети и входит в состояние инициализации (INIT)
2)клиент посылает запрос DHCPDISCOVER и переходит в состояние выбора (SELECTING)
3)клиент посылает запрос DHCPREQUEST и пререходит в состояние запроса (REQUESTING)
4)клиент связывется с сервером и устанавливает таймера аренды ip адреса (три четверти, половина и полное время)
4)клиент получает ip адрес от DHCP сервера и преходит в состояние привязки (BINDING)
5)при истечении тамймера половины времени аренды клиент пререходит в состояние обновления аренды (RENWEING), оптправляя серверу запрос DHCPREQUEST
6)сервер отправляет ответ DHCPACK клиенту и тот переходит в состояние привязки (BINDING) и обновляет таймера аренды

5.1)если продлить аренду не удалось, то через 3/4 таймера аренды клиент пререходит в состояние повторной привязки (REBINDING) и пытяестя опять возвратиться в сотстояние привзяки отправляя запрос DHCPREQUEST
5.2)если продлить аренду и в этом случае не получается то клиент переходит обратно в состояние инициализации (INIT)

1.1)если клиент ранее получал ip адрес, то он начинает с состояния инициализации при презагрузке (INIT-REBOOT) и посылает запрос DHCPREQUEST
1.2)клиент пререходит в состояние перезагрузки и если таймер аренды не иссек сразу преходит в состояние привязки (BIND) со старым ip адресом

dhclinet - клиент dhcp
/etc/dhcp/dhclinet.d/ - каталог сценариев запускаемых dhclinet
dhcpd - сервер dhcp
dhcrelay - сервер агента ретрансляции (принимает широковещаетльный запрос и пренаправляет DHCP серверу)
dhcpd -t - просверка синтаксиса конфига /etc/dhcpd.conf
subnet <подсеть> netmask <маска подсети> { - базовая конфигурация dhcpd
    range <начало> <конец>; - пул адресов для аренды
    option domain-name "<имя домена>"; - имя домена подсети
    option domain-name-servers <адреса DNS серверов  через запятую>; - адреса DNS серверов (можно поместить в глобальную секцию для конфигурации сразу всех подсетей)
    option router <маршрутизаторы через запятую>; - ардреса шлюзов по умолчанию в подсети
    max-lease-time <время в секундах>; - максимальное время на котрое сервер может выдать ip
    default-lease-time <время в секундах>; -  стандартное время аренды, если клиаент не указал конкретно
    }

PXE (preboot execution enviroment) = DHCP + TFTP
next-server <ip адрес> - задать ip tftp сервера (dhcpd.conf)
filename <имя файла> - имя файла, который надо загрузить при получении ip адреса (/tftpboot/ - папка окдуа tftp берет файлы) (обычно ядро или загрузчик ОС)
/images/pxeboot - папка для PXE на установочном диске (initrd.img и vmlinuz)
/usr/lib/syslinux/pxelinux* - местонахождене загрузчика ОС через PXE
pxelinux.cfg/ - папка с конфигами, которые загруживает PXE для конфигурации загрузчика (drfault - дефолтный конфиг, можно также создавать конфиги для конкретных IP и MAC)
label:
    kernel vmlinuz
    append initrd=initrd.img ks=anaconda-ks.cfg - поля конфига для быстрой настройки параметров загрузчика с помощью файла шаблона (anaconda-ks.cfg)
/var/ftp/pub/images - папка в которой должны лежать образы для второго шага загрузчика (загрузка через ftp) (можно смонтировать в папку содержимое установочного диска)