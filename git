git init - инициализация лоакльного репозитория
git init <папка проекта> --template=<папка шаблона> - копирование фалов из папки шаблона в папку .git при инициализации репозитория
git clone <url> - клонировать удаленный репозиторий (вызывает git init, чтобы создать новый репозиторий, затем копирует данные из удаленного репозитория)
git clone <url> <папка> - клонировать репозиторий в определенную папку
git clone <url> --branch mainn - клонировать определенную ветку репозитория
git remote add origin <url> - создание связи с удаленным репозиторием
git remote rm origin - удаление связи с удаленным репозиторием
git remote rename origin originq - переименование связи с удаленным репозиторием
git remote show origin - информация о связи с удаленным репозиторием
git remote - список связей с удаленными репозиториями
git branch - список веток в локальном репозитории
git branch -r - список веток в удаленном репозитории
git branch main - создание новой ветки
git branch -m main - переименование текущей ветки
git checkout main - переход на новую ветку
git checkout -b <имя ветки> <хэш коммита> - сохранения состояния репозитория на момент коммита в отдельной ветке и переход на нее
git add . - включение изменений во всех файлах в следующий коммит
git add <файл> -  включение изменений в конкретном файле в следующий коммит
git add . -p - просмотр каждого изменения
git ls-files -s - список список зафиксированных изменений
git commit -m "<комментарий>" - фиксация включенных изменений в локальном репозитории
git commit -amend - добавление новых зафиксированных изменений в последний коммит или изменение комментария к последему коммиту (коммит должен быть незапушенный)
git commit -amend --no-edit - добавление новых зафиксированных изменений в последний коммит без изменения комментария
git push -u origin main - выгрузка содержимого локального репозитория в удаленный репозиторий
git log - история коммитов
git log --oneline - история коммитов с однострочным выводом
git pull - извлечение и загрузка содержимого из удаленного репозитория в локальный
git pull --rebase - использовать rebase вместо merge при интеграции удаленной ветки в локальную
git rebase branch2 - перенос всех коммитов ветки main в конец ветки branch2, создавая новые коммиты в текщей ветке для каждого коммита в branch2 ветке, тем самым ветка branch2 исчезает
git merge branch2 - перенос всех изменений из ветки branch2 в текущую ветку, путем создания коммита слияния (у коммита слияния несколько родителей), обе ветки остаются
git status - вывод состояния рабочего каталога и списка файлов добавленных командой git add 
vi <файл с конфликтом> - решение конфлика в файле (потом изменения надо закомитить), редактор может быть другой
git config --global core.editor "code --wait" - изменение реадктора с vim на vscode
git reset <хэш коммита> - удаление всех незапушенных коммитов после указанного, но не изменений (хэш есть в выводе git log)
git reset --hard <хэш коммита> - удаление всех незапушенных коммитов после указанного, а также изменений 
git reset HEAD^3 - удаление 3 последних коммитов (HEAD - указатель на последний коммит)
git reset <файл> - отмена фиксации изменений файла (git add команды)
git checkout . - откат всех изменений к текущему коммиту (изменения не восстановить)
hit show HEAD - просмотр изменений последнего коммита
git revert <хэш коммита> - содание коммита отменяющего изменения выбранного коммита (работет даже для запушенных коммитов)
git diff - показывает зафиксированные изменения файлов построчно
git archive --format=tar HEAD - создание архива репозитория
git stash -p - убрать зафиксированные изменения в отдельное хранилище, чтобы их не коммитить
git stash pop - достать убранные изменения из хранилища для последующего коммита
git stash apply - применить убранные изменения из хранилища, не доставая их
git stash show - просмотр убранных изменений
git stash clear - удаление всех убранных изменений
git reflog - вывод журнала ссылок
.gitignore - файл с игнорируемыми для git add файлами
git rm --cached <файл> - удалить файл из репозитория, но не из каталога
git rm -r <папка> - удалить рекурсивно файлы из репозитория
git rm -n - просмотр удаляемых файлов из репозитория
git rm -f <файл> - удалить файл из репозитория и из каталога
git check-ignore -v <файл1, файл2> - вывести шаблон, котрый приводит к одновременному игнорированию всех предложенных файлов
git tag <имя тэга> - создание тэга (одновременноссылки на определенный коммит)
git tag - список тэгов
git push origin <имя тэга> - отправка тэга в удаленный репозиторий
git checkout <имя тэга> - преход к состоянию репозитория на момент тэга
git tag -d <имя тэга> - удаление тэга
git blame <файл> - отображение метаданных автора, связанных со строками, которые были внесены в файл при коммите
git clean - удаление неотслеживаемых файлов (изменения в них не фиксировались)
git clean -n - просмотр удаляемых файлов
git clean -f <файл> - удалить конкретный неотслеживаемый файл
git clean -d- удалить все неотслеживаемые каталоги
git clean -di - удаление неотслеживаемых файлов в интерактивном режиме
git fetch origin - извлесение всех коммитов, файлов и ссылков из удаленного репозитория (содержимое остается изолированным от локальных данных и на него можно пререключится с помощью git checkout)
git fetch origin main - извлесение всех коммитов, файлов и ссылков из определенной ветки удаленного репозитория
git pull -u origin main = git fetch origin main -> git checkout main -> git merge origin/main
git push -u origin main - те же шаги, что и в git pull но на сервере удаленного репозитория

МЕТОДОЛОГИИ
gitflow ветки:
    master - код готовый к исполнению (напрямую коммитить нельзя)
    develop - весь код ветки master + новые непротестированные функции (напрямую коммитить нельзя)
    feature/<название> - код новой функциональности или изменение текущей (создается из ветки develop потом с ней сливается) 
    hotfix - код исправления бага (создается из ветки master потом сливается с ветками master и develop)
    release - код новой функциональности готовый к продакшену  (создается из ветки develop потом сливается с ветками master и develop с добалением тэга)
git flow init - создание всех веток в локальном репозитории согласно gitflow
git flow feature start <имя ветки> - создане feature ветки (то же самое для hotfix и release)
git flow feature finish <имя ветки> - закрытие feature ветки, а именно команда автоматически мерджит ветку со всем чем надо, после чего ветка удаляется (то же самое для hotfix и release)
githubflow ветки:
    main - код готовый к исполнению
    все остальные, но изме изменения не сливаются в основную ветку, а создается pull-request
